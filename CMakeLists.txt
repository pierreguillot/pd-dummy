cmake_minimum_required(VERSION 2.8)

project(pd-dummy)
option(CONF "Build for configuration" "universal")


set(CMAKE_MACOSX_RPATH Off)
set(CMAKE_OSX_DEPLOYMENT_TARGET 10.4)
set(CMAKE_OSX_ARCHITECTURES "i386;x86_64")
set(CMAKE_SHARED_LIBRARY_PREFIX)

set(PD_OUTPUT_DIRECTORY "dummies")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${PD_OUTPUT_DIRECTORY}/)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${PD_OUTPUT_DIRECTORY}/)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${PD_OUTPUT_DIRECTORY}/)
foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_SOURCE_DIR}/${PD_OUTPUT_DIRECTORY}/)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_SOURCE_DIR}/${PD_OUTPUT_DIRECTORY}/)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${PROJECT_SOURCE_DIR}/${PD_OUTPUT_DIRECTORY}/)
endforeach(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)

if(${APPLE})
	if(${CONF} STREQUAL "universal")
		message(STATUS "Build for MacOs Universal")
	else()
		message(STATUS "Build for MacOs Universal! Blah! In your face Pierre!")
	endif()
	set(CMAKE_SHARED_LINKER_FLAGS "-undefined dynamic_lookup")
	set(CMAKE_SHARED_LIBRARY_SUFFIX ".pd_darwin")
elseif(${UNIX})
	if(${CONF} EQUAL 32)
		message(STATUS "Build for Linux 32bits")
		set(CMAKE_CXX_FLAGS -m32)
	else()
		message(STATUS "Build for Linux 64bits")
	endif()
		set(CMAKE_SHARED_LIBRARY_SUFFIX ".pd_linux")
else()
	set(CMAKE_SHARED_LIBRARY_SUFFIX  ".dll")
	link_directories(${PROJECT_SOURCE_DIR}/pdwinlib)
	add_definitions("/D_CRT_SECURE_NO_WARNINGS /wd4091 /wd4996")
endif()

include_directories(${PROJECT_SOURCE_DIR}/pd/src/)

add_library(pak SHARED ${PROJECT_SOURCE_DIR}/src/pak.c)
if(${WIN32})
		target_link_libraries(pak pd)
endif()
