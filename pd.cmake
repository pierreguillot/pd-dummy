cmake_minimum_required(VERSION 2.8)

set(CMAKE_SUPPRESS_REGENERATION true)
set(CMAKE_MACOSX_RPATH Off)
set(CMAKE_OSX_DEPLOYMENT_TARGET 10.4)
set(CMAKE_OSX_ARCHITECTURES "i386;x86_64")
set(CMAKE_SHARED_LIBRARY_PREFIX)

if(${APPLE})
	set(CMAKE_SHARED_LINKER_FLAGS "-undefined dynamic_lookup")
	set(CMAKE_SHARED_LIBRARY_SUFFIX ".pd_darwin")
elseif(${UNIX})
		set(CMAKE_SHARED_LIBRARY_SUFFIX ".pd_linux")
else()
	set(CMAKE_SHARED_LIBRARY_SUFFIX  ".dll")
	add_definitions("/D_CRT_SECURE_NO_WARNINGS /wd4091 /wd4996")
endif()

# The function adds an external to the project.
# PROJECT_NAME is the name of your project (for example: freeverb_project)
# EXTERNAL_NAME is the name of your external (for example: freeverb~)
# EXTERNAL_SOURCES are the source files (for example: freeverb~.c)
# The function should be call:
# add_external(freeverb_project freeverb~ "userpath/freeverb~.c userpath/otherfile.c")
# later see how to manage relative and absolute path
function(add_external PROJECT_NAME EXTERNAL_NAME EXTERNAL_SOURCES)
	source_group(src FILES ${EXTERNAL_SOURCES})
	add_library(${PROJECT_NAME} SHARED ${EXTERNAL_SOURCES})
	string(FIND ${EXTERNAL_NAME} "." NAME_HAS_DOT)
	if((CMAKE_GENERATOR STREQUAL Xcode) AND (NAME_HAS_DOT EQUAL -1))
	  set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME '${EXTERNAL_NAME}')
	else()
	  set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME ${EXTERNAL_NAME})
	endif()
	if(${WIN32})
			target_link_libraries(${PROJECT_NAME} pd)
	endif()
endfunction(add_external)

# The macro defines the output path of the externals regardless the configuration and the OS.
macro(set_external_path EXTERNAL_PATH)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${EXTERNAL_PATH})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${EXTERNAL_PATH})
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${EXTERNAL_PATH})
	foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
	    string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
	    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${EXTERNAL_PATH})
	    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${EXTERNAL_PATH})
	    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${EXTERNAL_PATH})
	endforeach(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)
endmacro(set_external_path)
